/*
Deployment script for CASE-DB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "CASE-DB"
:setvar DefaultFilePrefix "CASE-DB"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating database $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY SIMPLE,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY ON,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating Table [dbo].[CFAssociation]...';


GO
CREATE TABLE [dbo].[CFAssociation] (
    [Id]                      UNIQUEIDENTIFIER NOT NULL,
    [AssociationType]         VARCHAR (200)    NOT NULL,
    [SequenceNumber]          INT              NULL,
    [OriginNodeId]            VARCHAR (200)    NOT NULL,
    [OriginNodeTitle]         VARCHAR (200)    NOT NULL,
    [DestinationNodeId]       VARCHAR (200)    NOT NULL,
    [DestinationNodeTitle]    VARCHAR (200)    NOT NULL,
    [CFAssociationGroupingId] UNIQUEIDENTIFIER NULL,
    [LastChangeDateTime]      SMALLDATETIME    NOT NULL,
    [CFDocumentId]            UNIQUEIDENTIFIER NULL,
    CONSTRAINT [PK_CFAssociation_Id] PRIMARY KEY NONCLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[CFAssociationGrouping]...';


GO
CREATE TABLE [dbo].[CFAssociationGrouping] (
    [Id]                 UNIQUEIDENTIFIER NOT NULL,
    [Title]              VARCHAR (200)    NOT NULL,
    [Description]        VARCHAR (200)    NULL,
    [LastChangeDateTime] SMALLDATETIME    NOT NULL,
    CONSTRAINT [PK_CFAssociationGrouping_Id] PRIMARY KEY NONCLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[CFConcept]...';


GO
CREATE TABLE [dbo].[CFConcept] (
    [Id]                 UNIQUEIDENTIFIER NOT NULL,
    [Title]              VARCHAR (200)    NOT NULL,
    [Keywords]           VARCHAR (200)    NULL,
    [HierarchyCode]      VARCHAR (200)    NOT NULL,
    [Description]        VARCHAR (200)    NULL,
    [LastChangeDateTime] SMALLDATETIME    NOT NULL,
    CONSTRAINT [PK_CFConcept_Id] PRIMARY KEY NONCLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[CFDocument]...';


GO
CREATE TABLE [dbo].[CFDocument] (
    [Id]                 UNIQUEIDENTIFIER NOT NULL,
    [Creator]            VARCHAR (200)    NOT NULL,
    [Title]              VARCHAR (200)    NOT NULL,
    [LastChangeDateTime] SMALLDATETIME    NOT NULL,
    [OfficialSourceURL]  VARCHAR (200)    NULL,
    [Publisher]          VARCHAR (200)    NULL,
    [Description]        VARCHAR (200)    NULL,
    [Subject]            VARCHAR (200)    NULL,
    [SubjectId]          UNIQUEIDENTIFIER NULL,
    [Language]           VARCHAR (200)    NULL,
    [Version]            VARCHAR (200)    NULL,
    [AdoptionStatus]     VARCHAR (200)    NULL,
    [StatusStartDate]    DATE             NULL,
    [StatusEndDate]      DATE             NULL,
    [LicenseId]          UNIQUEIDENTIFIER NULL,
    [Notes]              VARCHAR (MAX)    NULL,
    CONSTRAINT [PK_CFDocument_Id] PRIMARY KEY NONCLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[CFItem]...';


GO
CREATE TABLE [dbo].[CFItem] (
    [Id]                   UNIQUEIDENTIFIER NOT NULL,
    [FullStatement]        VARCHAR (3000)   NOT NULL,
    [AlternativeLabel]     VARCHAR (3000)   NULL,
    [CFItemType]           VARCHAR (200)    NULL,
    [HumanCodingScheme]    VARCHAR (200)    NULL,
    [ListEnumeration]      INT              NULL,
    [AbbreviatedStatement] VARCHAR (3000)   NULL,
    [ConceptKeywords]      VARCHAR (200)    NULL,
    [ConceptKeywordsId]    UNIQUEIDENTIFIER NULL,
    [Notes]                VARCHAR (MAX)    NULL,
    [Language]             VARCHAR (200)    NULL,
    [EducationLevel]       VARCHAR (200)    NULL,
    [CFItemTypeId]         UNIQUEIDENTIFIER NULL,
    [LicenseId]            UNIQUEIDENTIFIER NULL,
    [StatusStartDate]      DATE             NULL,
    [StatusEndDate]        DATE             NULL,
    [LastChangeDateTime]   SMALLDATETIME    NOT NULL,
    [CFDocumentId]         UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_CFItem_Id] PRIMARY KEY NONCLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[CFItemType]...';


GO
CREATE TABLE [dbo].[CFItemType] (
    [Id]                 UNIQUEIDENTIFIER NOT NULL,
    [Title]              VARCHAR (200)    NOT NULL,
    [HierarchyCode]      VARCHAR (200)    NOT NULL,
    [Description]        VARCHAR (200)    NOT NULL,
    [TypeCode]           VARCHAR (200)    NULL,
    [LastChangeDateTime] SMALLDATETIME    NOT NULL,
    CONSTRAINT [PK_CFItemType_Id] PRIMARY KEY NONCLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[CFLicense]...';


GO
CREATE TABLE [dbo].[CFLicense] (
    [Id]                 UNIQUEIDENTIFIER NOT NULL,
    [Title]              VARCHAR (200)    NOT NULL,
    [Description]        VARCHAR (200)    NULL,
    [LicenseText]        VARCHAR (MAX)    NOT NULL,
    [LastChangeDateTime] SMALLDATETIME    NOT NULL,
    CONSTRAINT [PK_CFLicense_Id] PRIMARY KEY NONCLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[CFRubric]...';


GO
CREATE TABLE [dbo].[CFRubric] (
    [Id]                 UNIQUEIDENTIFIER NOT NULL,
    [Title]              VARCHAR (200)    NULL,
    [Description]        VARCHAR (200)    NULL,
    [LastChangeDateTime] SMALLDATETIME    NOT NULL,
    CONSTRAINT [PK_CFRubric_Id] PRIMARY KEY NONCLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[CFRubricCriterion]...';


GO
CREATE TABLE [dbo].[CFRubricCriterion] (
    [Id]                 UNIQUEIDENTIFIER NOT NULL,
    [Category]           VARCHAR (200)    NULL,
    [Description]        VARCHAR (200)    NULL,
    [CFItemId]           UNIQUEIDENTIFIER NULL,
    [Weight]             FLOAT (53)       NULL,
    [Position]           INT              NULL,
    [RubricId]           UNIQUEIDENTIFIER NULL,
    [LastChangeDateTime] SMALLDATETIME    NOT NULL,
    CONSTRAINT [PK_CFRubricCriterion_Id] PRIMARY KEY NONCLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[CFRubricCriterionLevel]...';


GO
CREATE TABLE [dbo].[CFRubricCriterionLevel] (
    [Id]                 UNIQUEIDENTIFIER NOT NULL,
    [Description]        VARCHAR (200)    NULL,
    [Quality]            VARCHAR (200)    NULL,
    [Score]              FLOAT (53)       NULL,
    [Feedback]           VARCHAR (200)    NULL,
    [Position]           INT              NULL,
    [LastChangeDateTime] SMALLDATETIME    NOT NULL,
    [RubricCriterionId]  UNIQUEIDENTIFIER NULL,
    CONSTRAINT [PK_CFRubricCriterionLevel_Id] PRIMARY KEY NONCLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[CFSubject]...';


GO
CREATE TABLE [dbo].[CFSubject] (
    [Id]                 UNIQUEIDENTIFIER NOT NULL,
    [Title]              VARCHAR (200)    NOT NULL,
    [HierarchyCode]      VARCHAR (200)    NOT NULL,
    [Description]        VARCHAR (200)    NULL,
    [LastChangeDateTime] SMALLDATETIME    NOT NULL,
    CONSTRAINT [PK_CFSubject_Id] PRIMARY KEY NONCLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Foreign Key [dbo].[FK_CFAssociation_CFAssociationGroupingId]...';


GO
ALTER TABLE [dbo].[CFAssociation]
    ADD CONSTRAINT [FK_CFAssociation_CFAssociationGroupingId] FOREIGN KEY ([CFAssociationGroupingId]) REFERENCES [dbo].[CFAssociationGrouping] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_CFAssociation_CFDocumentId]...';


GO
ALTER TABLE [dbo].[CFAssociation]
    ADD CONSTRAINT [FK_CFAssociation_CFDocumentId] FOREIGN KEY ([CFDocumentId]) REFERENCES [dbo].[CFDocument] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_CFDocument_SubjectId]...';


GO
ALTER TABLE [dbo].[CFDocument]
    ADD CONSTRAINT [FK_CFDocument_SubjectId] FOREIGN KEY ([SubjectId]) REFERENCES [dbo].[CFSubject] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_CFDocument_LicenseId]...';


GO
ALTER TABLE [dbo].[CFDocument]
    ADD CONSTRAINT [FK_CFDocument_LicenseId] FOREIGN KEY ([LicenseId]) REFERENCES [dbo].[CFLicense] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_CFItem_CFDocumentId]...';


GO
ALTER TABLE [dbo].[CFItem]
    ADD CONSTRAINT [FK_CFItem_CFDocumentId] FOREIGN KEY ([CFDocumentId]) REFERENCES [dbo].[CFDocument] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_CFItem_CFItemTypeId]...';


GO
ALTER TABLE [dbo].[CFItem]
    ADD CONSTRAINT [FK_CFItem_CFItemTypeId] FOREIGN KEY ([CFItemTypeId]) REFERENCES [dbo].[CFItemType] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_CFItem_ConceptKeywordsId]...';


GO
ALTER TABLE [dbo].[CFItem]
    ADD CONSTRAINT [FK_CFItem_ConceptKeywordsId] FOREIGN KEY ([ConceptKeywordsId]) REFERENCES [dbo].[CFConcept] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_CFItem_LicenseId]...';


GO
ALTER TABLE [dbo].[CFItem]
    ADD CONSTRAINT [FK_CFItem_LicenseId] FOREIGN KEY ([LicenseId]) REFERENCES [dbo].[CFLicense] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_CFRubricCriterion_RubricId]...';


GO
ALTER TABLE [dbo].[CFRubricCriterion]
    ADD CONSTRAINT [FK_CFRubricCriterion_RubricId] FOREIGN KEY ([RubricId]) REFERENCES [dbo].[CFRubric] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_CFRubricCriterion_CFItemId]...';


GO
ALTER TABLE [dbo].[CFRubricCriterion]
    ADD CONSTRAINT [FK_CFRubricCriterion_CFItemId] FOREIGN KEY ([CFItemId]) REFERENCES [dbo].[CFItem] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_CFRubricCriterionLevel_RubricCriterionId]...';


GO
ALTER TABLE [dbo].[CFRubricCriterionLevel]
    ADD CONSTRAINT [FK_CFRubricCriterionLevel_RubricCriterionId] FOREIGN KEY ([RubricCriterionId]) REFERENCES [dbo].[CFRubricCriterion] ([Id]);


GO
PRINT N'Creating Trigger [dbo].[TGR_CFAssociation_Update]...';


GO
/********************************************************************************
        Triggers
********************************************************************************/

CREATE TRIGGER [dbo].[TGR_CFAssociation_Update] ON [dbo].[CFAssociation]
AFTER UPDATE
AS
    BEGIN
        SET NOCOUNT ON;
        UPDATE [dbo].[CFAssociation]
        SET [LastChangeDateTime] = GETDATE()
        FROM [dbo].[CFAssociation] AS [T]
        INNER JOIN inserted AS [I] ON [T].[Id] = [I].[Id];
        PRINT(N'Table CFAssociation updated...');
    END
GO
PRINT N'Creating Trigger [dbo].[TGR_CFAssociationGrouping_Update]...';


GO

CREATE TRIGGER [dbo].[TGR_CFAssociationGrouping_Update] ON [dbo].[CFAssociationGrouping]
AFTER UPDATE
AS
    BEGIN
        SET NOCOUNT ON;
        UPDATE [dbo].[CFAssociationGrouping]
        SET [LastChangeDateTime] = GETDATE()
        FROM [dbo].[CFAssociationGrouping] AS [T]
        INNER JOIN inserted AS [I] ON [T].[Id] = [I].[Id];
        PRINT(N'Table CFAssociationGrouping updated...');
    END
GO
PRINT N'Creating Trigger [dbo].[TGR_CFConcept_Update]...';


GO

CREATE TRIGGER [dbo].[TGR_CFConcept_Update] ON [dbo].[CFConcept]
AFTER UPDATE
AS
    BEGIN
        SET NOCOUNT ON;
        UPDATE [dbo].[CFConcept]
        SET [LastChangeDateTime] = GETDATE()
        FROM [dbo].[CFConcept] AS [T]
        INNER JOIN inserted AS [I] ON [T].[Id] = [I].[Id];
        PRINT(N'Table CFConcept updated...');
    END
GO
PRINT N'Creating Trigger [dbo].[TGR_CFDocument_Update]...';


GO

CREATE TRIGGER [dbo].[TGR_CFDocument_Update] ON [dbo].[CFDocument]
AFTER UPDATE
AS
    BEGIN
        SET NOCOUNT ON;
        UPDATE [dbo].[CFDocument]
        SET [LastChangeDateTime] = GETDATE()
        FROM [dbo].[CFDocument] AS [T]
        INNER JOIN inserted AS [I] ON [T].[Id] = [I].[Id];
        PRINT(N'Table CFDocument updated...');
    END
GO
PRINT N'Creating Trigger [dbo].[TGR_CFItem_Update]...';


GO

CREATE TRIGGER [dbo].[TGR_CFItem_Update] ON [dbo].[CFItem]
AFTER UPDATE
AS
    BEGIN
        SET NOCOUNT ON;
        UPDATE [dbo].[CFItem]
        SET [LastChangeDateTime] = GETDATE()
        FROM [dbo].[CFItem] AS [T]
        INNER JOIN inserted AS [I] ON [T].[Id] = [I].[Id];
        PRINT(N'Table CFItem updated...');
    END
GO
PRINT N'Creating Trigger [dbo].[TGR_CFItemType_Update]...';


GO

CREATE TRIGGER [dbo].[TGR_CFItemType_Update] ON [dbo].[CFItemType]
AFTER UPDATE
AS
    BEGIN
        SET NOCOUNT ON;
        UPDATE [dbo].[CFItemType]
        SET [LastChangeDateTime] = GETDATE()
        FROM [dbo].[CFItemType] AS [T]
        INNER JOIN inserted AS [I] ON [T].[Id] = [I].[Id];
        PRINT(N'Table CFItemType updated...');
    END
GO
PRINT N'Creating Trigger [dbo].[TGR_CFLicense_Update]...';


GO

CREATE TRIGGER [dbo].[TGR_CFLicense_Update] ON [dbo].[CFLicense]
AFTER UPDATE
AS
    BEGIN
        SET NOCOUNT ON;
        UPDATE [dbo].[CFLicense]
        SET [LastChangeDateTime] = GETDATE()
        FROM [dbo].[CFLicense] AS [T]
        INNER JOIN inserted AS [I] ON [T].[Id] = [I].[Id];
        PRINT(N'Table CFLicense updated...');
    END
GO
PRINT N'Creating Trigger [dbo].[TGR_CFRubric_Update]...';


GO

CREATE TRIGGER [dbo].[TGR_CFRubric_Update] ON [dbo].[CFRubric]
AFTER UPDATE
AS
    BEGIN
        SET NOCOUNT ON;
        UPDATE [dbo].[CFRubric]
        SET [LastChangeDateTime] = GETDATE()
        FROM [dbo].[CFRubric] AS [T]
        INNER JOIN inserted AS [I] ON [T].[Id] = [I].[Id];
        PRINT(N'Table CFRubric updated...');
    END
GO
PRINT N'Creating Trigger [dbo].[TGR_CFRubricCriterion_Update]...';


GO

CREATE TRIGGER [dbo].[TGR_CFRubricCriterion_Update] ON [dbo].[CFRubricCriterion]
AFTER UPDATE
AS
    BEGIN
        SET NOCOUNT ON;
        UPDATE [dbo].[CFRubricCriterion]
        SET [LastChangeDateTime] = GETDATE()
        FROM [dbo].[CFRubricCriterion] AS [T]
        INNER JOIN inserted AS [I] ON [T].[Id] = [I].[Id];
        PRINT(N'Table CFRubricCriterion updated...');
    END
GO
PRINT N'Creating Trigger [dbo].[TGR_CFRubricCriterionLevel_Update]...';


GO

CREATE TRIGGER [dbo].[TGR_CFRubricCriterionLevel_Update] ON [dbo].[CFRubricCriterionLevel]
AFTER UPDATE
AS
    BEGIN
        SET NOCOUNT ON;
        UPDATE [dbo].[CFRubricCriterionLevel]
        SET [LastChangeDateTime] = GETDATE()
        FROM [dbo].[CFRubricCriterionLevel] AS [T]
        INNER JOIN inserted AS [I] ON [T].[Id] = [I].[Id];
        PRINT(N'Table CFRubricCriterionLevel updated...');
    END
GO
PRINT N'Creating Trigger [dbo].[TGR_CFSubject_Update]...';


GO

CREATE TRIGGER [dbo].[TGR_CFSubject_Update] ON [dbo].[CFSubject]
AFTER UPDATE
AS
    BEGIN
        SET NOCOUNT ON;
        UPDATE [dbo].[CFSubject]
        SET [LastChangeDateTime] = GETDATE()
        FROM [dbo].[CFSubject] AS [T]
        INNER JOIN inserted AS [I] ON [T].[Id] = [I].[Id];
        PRINT(N'Table CFSubject updated...');
    END
GO
PRINT N'Creating Procedure [dbo].[DeleteCFAssociation]...';


GO
/********************************************************************************
        Delete Procedures
********************************************************************************/

CREATE PROCEDURE [dbo].[DeleteCFAssociation]
(
    @Id UNIQUEIDENTIFIER
)
AS
    BEGIN
        SET NOCOUNT ON;
        DELETE FROM [dbo].[CFAssociation] WHERE [Id] = @Id;
        RETURN @@ROWCOUNT;
    END
GO
PRINT N'Creating Procedure [dbo].[DeleteCFAssociationGrouping]...';


GO
CREATE PROCEDURE [dbo].[DeleteCFAssociationGrouping]
(
    @Id UNIQUEIDENTIFIER
)
AS
    BEGIN
        SET NOCOUNT ON;
        DELETE FROM [dbo].[CFAssociationGrouping] WHERE [Id] = @Id;
        RETURN @@ROWCOUNT;
    END
GO
PRINT N'Creating Procedure [dbo].[DeleteCFConcept]...';


GO
CREATE PROCEDURE [dbo].[DeleteCFConcept]
(
    @Id UNIQUEIDENTIFIER
)
AS
    BEGIN
        SET NOCOUNT ON;
        DELETE FROM [dbo].[CFConcept] WHERE [Id] = @Id;
        RETURN @@ROWCOUNT;
    END
GO
PRINT N'Creating Procedure [dbo].[DeleteCFDocument]...';


GO
CREATE PROCEDURE [dbo].[DeleteCFDocument]
(
    @Id UNIQUEIDENTIFIER
)
AS
    BEGIN
        SET NOCOUNT ON;
        DELETE FROM [dbo].[CFDocument] WHERE [Id] = @Id;
        RETURN @@ROWCOUNT;
    END
GO
PRINT N'Creating Procedure [dbo].[DeleteCFItem]...';


GO
CREATE PROCEDURE [dbo].[DeleteCFItem]
(
    @Id UNIQUEIDENTIFIER
)
AS
    BEGIN
        SET NOCOUNT ON;
        DELETE FROM [dbo].[CFItem] WHERE [Id] = @Id;
        RETURN @@ROWCOUNT;
    END
GO
PRINT N'Creating Procedure [dbo].[DeleteCFItemType]...';


GO
CREATE PROCEDURE [dbo].[DeleteCFItemType]
(
    @Id UNIQUEIDENTIFIER
)
AS
    BEGIN
        SET NOCOUNT ON;
        DELETE FROM [dbo].[CFItemType] WHERE [Id] = @Id;
        RETURN @@ROWCOUNT;
    END
GO
PRINT N'Creating Procedure [dbo].[DeleteCFLicense]...';


GO
CREATE PROCEDURE [dbo].[DeleteCFLicense]
(
    @Id UNIQUEIDENTIFIER
)
AS
    BEGIN
        SET NOCOUNT ON;
        DELETE FROM [dbo].[CFLicense] WHERE [Id] = @Id;
        RETURN @@ROWCOUNT;
    END
GO
PRINT N'Creating Procedure [dbo].[DeleteCFRubric]...';


GO
CREATE PROCEDURE [dbo].[DeleteCFRubric]
(
    @Id UNIQUEIDENTIFIER
)
AS
    BEGIN
        SET NOCOUNT ON;
        DELETE FROM [dbo].[CFRubric] WHERE [Id] = @Id;
        RETURN @@ROWCOUNT;
    END
GO
PRINT N'Creating Procedure [dbo].[DeleteCFRubricCriterion]...';


GO
CREATE PROCEDURE [dbo].[DeleteCFRubricCriterion]
(
    @Id UNIQUEIDENTIFIER
)
AS
    BEGIN
        SET NOCOUNT ON;
        DELETE FROM [dbo].[CFRubricCriterion] WHERE [Id] = @Id;
        RETURN @@ROWCOUNT;
    END
GO
PRINT N'Creating Procedure [dbo].[DeleteCFRubricCriterionLevel]...';


GO
CREATE PROCEDURE [dbo].[DeleteCFRubricCriterionLevel]
(
    @Id UNIQUEIDENTIFIER
)
AS
    BEGIN
        SET NOCOUNT ON;
        DELETE FROM [dbo].[CFRubricCriterionLevel] WHERE [Id] = @Id;
        RETURN @@ROWCOUNT;
    END
GO
PRINT N'Creating Procedure [dbo].[DeleteCFSubject]...';


GO
CREATE PROCEDURE [dbo].[DeleteCFSubject]
(
    @Id UNIQUEIDENTIFIER
)
AS
    BEGIN
        SET NOCOUNT ON;
        DELETE FROM [dbo].[CFSubject] WHERE [Id] = @Id;
        RETURN @@ROWCOUNT;
    END
GO
PRINT N'Creating Procedure [dbo].[InsertCFAssociation]...';


GO
/********************************************************************************
        Insert Procedures
********************************************************************************/

CREATE PROCEDURE [dbo].[InsertCFAssociation]
(
    @Id UNIQUEIDENTIFIER,
    @AssociationType VARCHAR(200),
    @SequenceNumber INT = NULL,
    @OriginNodeId VARCHAR(200),
    @DestinationNodeId VARCHAR(200),
    @CFAssociationGroupingId UNIQUEIDENTIFIER = NULL,
    @LastChangeDateTime DATETIME,
    @CFDocumentId UNIQUEIDENTIFIER = NULL
)
AS
    BEGIN
        SET NOCOUNT ON;
        INSERT INTO [dbo].[CFAssociation]
        (
            [Id],
            [AssociationType],
            [SequenceNumber],
            [OriginNodeId],
            [DestinationNodeId],
            [CFAssociationGroupingId],
            [LastChangeDateTime],
            [CFDocumentId]
        )
        VALUES
        (
            @Id,
            @AssociationType,
            @SequenceNumber,
            @OriginNodeId,
            @DestinationNodeId,
            @CFAssociationGroupingId,
            @LastChangeDateTime,
            @CFDocumentId
        );
        SELECT * FROM [dbo].[CFAssociation] WHERE [Id] = @Id;
    END
GO
PRINT N'Creating Procedure [dbo].[InsertCFAssociationGrouping]...';


GO
CREATE PROCEDURE [dbo].[InsertCFAssociationGrouping]
(
    @Id UNIQUEIDENTIFIER,
    @Title VARCHAR(200),
    @Description VARCHAR(200) = NULL,
    @LastChangeDateTime DATETIME
)
AS
    BEGIN
        SET NOCOUNT ON;
        INSERT INTO [dbo].[CFAssociationGrouping]
        (
            [Id],
            [Title],
            [Description],
            [LastChangeDateTime]
        )
        VALUES
        (
            @Id,
            @Title,
            @Description,
            @LastChangeDateTime
        );
        SELECT * FROM [dbo].[CFAssociationGrouping] WHERE [Id] = @Id;
    END
GO
PRINT N'Creating Procedure [dbo].[InsertCFConcept]...';


GO
CREATE PROCEDURE [dbo].[InsertCFConcept]
(
    @Id UNIQUEIDENTIFIER,
    @Title VARCHAR(200),
    @Keywords VARCHAR(200) = NULL,
    @HierarchyCode VARCHAR(200),
    @Description VARCHAR(200) = NULL,
    @LastChangeDateTime DATETIME
)
AS
    BEGIN
        SET NOCOUNT ON;
        INSERT INTO [dbo].[CFConcept]
        (
            [Id],
            [Title],
            [Keywords],
            [HierarchyCode],
            [Description],
            [LastChangeDateTime]
        )
        VALUES
        (
            @Id,
            @Title,
            @Keywords,
            @HierarchyCode,
            @Description,
            @LastChangeDateTime
        );
        SELECT * FROM [dbo].[CFConcept] WHERE [Id] = @Id;
    END
GO
PRINT N'Creating Procedure [dbo].[InsertCFDocument]...';


GO
CREATE PROCEDURE [dbo].[InsertCFDocument]
(
    @Id UNIQUEIDENTIFIER,
    @Creator VARCHAR(200),
    @Title VARCHAR(200),
    @LastChangeDateTime DATETIME,
    @OfficialSourceURL VARCHAR(200) = NULL,
    @Publisher VARCHAR(200) = NULL,
    @Description VARCHAR(200) = NULL,
    @Subject VARCHAR(200) = NULL,
    @SubjectId UNIQUEIDENTIFIER = NULL,
    @Language VARCHAR(200) = NULL,
    @Version VARCHAR(200) = NULL,
    @AdoptionStatus VARCHAR(200) = NULL,
    @StatusStartDate DATE = NULL,
    @StatusEndDate DATE = NULL,
    @LicenseId UNIQUEIDENTIFIER = NULL,
    @Notes VARCHAR(MAX) = NULL
)
AS
    BEGIN
        SET NOCOUNT ON;
        INSERT INTO [dbo].[CFDocument]
        (
            [Id],
            [Creator],
            [Title],
            [LastChangeDateTime],
            [OfficialSourceURL],
            [Publisher],
            [Description],
            [Subject],
            [SubjectId],
            [Language],
            [Version],
            [AdoptionStatus],
            [StatusStartDate],
            [StatusEndDate],
            [LicenseId],
            [Notes]
        )
        VALUES
        (
            @Id,
            @Creator,
            @Title,
            @LastChangeDateTime,
            @OfficialSourceURL,
            @Publisher,
            @Description,
            @Subject,
            @SubjectId,
            @Language,
            @Version,
            @AdoptionStatus,
            @StatusStartDate,
            @StatusEndDate,
            @LicenseId,
            @Notes
        );
        SELECT * FROM [dbo].[CFDocument] WHERE [Id] = @Id;
    END
GO
PRINT N'Creating Procedure [dbo].[InsertCFItem]...';


GO
CREATE PROCEDURE [dbo].[InsertCFItem]
(
    @Id UNIQUEIDENTIFIER,
    @FullStatement VARCHAR(3000),
    @AlternativeLabel VARCHAR(3000) = NULL,
    @CFItemType VARCHAR(200) = NULL,
    @HumanCodingScheme VARCHAR(200) = NULL,
    @ListEnumeration INT = NULL,
    @AbbreviatedStatement VARCHAR(3000) = NULL,
    @ConceptKeywords VARCHAR(200) = NULL,
    @ConceptKeywordsId UNIQUEIDENTIFIER = NULL,
    @Notes VARCHAR(MAX) = NULL,
    @Language VARCHAR(200) = NULL,
    @EducationLevel VARCHAR(200) = NULL,
    @CFItemTypeId UNIQUEIDENTIFIER = NULL,
    @LicenseId UNIQUEIDENTIFIER = NULL,
    @StatusStartDate DATE = NULL,
    @StatusEndDate DATE = NULL,
    @LastChangeDateTime DATETIME,
    @CFDocumentId UNIQUEIDENTIFIER
)
AS
    BEGIN
        SET NOCOUNT ON;
        INSERT INTO [dbo].[CFItem]
        (
            [Id],
            [FullStatement],
            [AlternativeLabel],
            [CFItemType],
            [HumanCodingScheme],
            [ListEnumeration],
            [AbbreviatedStatement],
            [ConceptKeywords],
            [ConceptKeywordsId],
            [Notes],
            [Language],
            [EducationLevel],
            [CFItemTypeId],
            [LicenseId],
            [StatusStartDate],
            [StatusEndDate],
            [LastChangeDateTime],
            [CFDocumentId]
        )
        VALUES
        (
            @Id,
            @FullStatement,
            @AlternativeLabel,
            @CFItemType,
            @HumanCodingScheme,
            @ListEnumeration,
            @AbbreviatedStatement,
            @ConceptKeywords,
            @ConceptKeywordsId,
            @Notes,
            @Language,
            @EducationLevel,
            @CFItemTypeId,
            @LicenseId,
            @StatusStartDate,
            @StatusEndDate,
            @LastChangeDateTime,
            @CFDocumentId
        );
        SELECT * FROM [dbo].[CFItem] WHERE [Id] = @Id;
    END
GO
PRINT N'Creating Procedure [dbo].[InsertCFItemType]...';


GO
CREATE PROCEDURE [dbo].[InsertCFItemType]
(
    @Id UNIQUEIDENTIFIER,
    @Title VARCHAR(200),
    @HierarchyCode VARCHAR(200),
    @Description VARCHAR(200),
    @TypeCode VARCHAR(200) = NULL,
    @LastChangeDateTime DATETIME
)
AS
    BEGIN
        SET NOCOUNT ON;
        INSERT INTO [dbo].[CFItemType]
        (
            [Id],
            [Title],
            [HierarchyCode],
            [Description],
            [TypeCode],
            [LastChangeDateTime]
        )
        VALUES
        (
            @Id,
            @Title,
            @HierarchyCode,
            @Description,
            @TypeCode,
            @LastChangeDateTime
        );
        SELECT * FROM [dbo].[CFItemType] WHERE [Id] = @Id;
    END
GO
PRINT N'Creating Procedure [dbo].[InsertCFLicense]...';


GO
CREATE PROCEDURE [dbo].[InsertCFLicense]
(
    @Id UNIQUEIDENTIFIER,
    @Title VARCHAR(200),
    @Description VARCHAR(200) = NULL,
    @LicenseText VARCHAR(MAX),
    @LastChangeDateTime DATETIME
)
AS
    BEGIN
        SET NOCOUNT ON;
        INSERT INTO [dbo].[CFLicense]
        (
            [Id],
            [Title],
            [Description],
            [LicenseText],
            [LastChangeDateTime]
        )
        VALUES
        (
            @Id,
            @Title,
            @Description,
            @LicenseText,
            @LastChangeDateTime
        );
        SELECT * FROM [dbo].[CFLicense] WHERE [Id] = @Id;
    END
GO
PRINT N'Creating Procedure [dbo].[InsertCFRubric]...';


GO
CREATE PROCEDURE [dbo].[InsertCFRubric]
(
    @Id UNIQUEIDENTIFIER,
    @Title VARCHAR(200) = NULL,
    @Description VARCHAR(200) = NULL,
    @LastChangeDateTime DATETIME
)
AS
    BEGIN
        SET NOCOUNT ON;
        INSERT INTO [dbo].[CFRubric]
        (
            [Id],
            [Title],
            [Description],
            [LastChangeDateTime]
        )
        VALUES
        (
            @Id,
            @Title,
            @Description,
            @LastChangeDateTime
        );
        SELECT * FROM [dbo].[CFRubric] WHERE [Id] = @Id;
    END
GO
PRINT N'Creating Procedure [dbo].[InsertCFRubricCriterion]...';


GO
CREATE PROCEDURE [dbo].[InsertCFRubricCriterion]
(
    @Id UNIQUEIDENTIFIER,
    @Category VARCHAR(200) = NULL,
    @Description VARCHAR(200) = NULL,
    @CFItemId UNIQUEIDENTIFIER = NULL,
    @Weight FLOAT = NULL,
    @Position INT = NULL,
    @RubricId UNIQUEIDENTIFIER = NULL,
    @LastChangeDateTime DATETIME
)
AS
    BEGIN
        SET NOCOUNT ON;
        INSERT INTO [dbo].[CFRubricCriterion]
        (
            [Id],
            [Category],
            [Description],
            [CFItemId],
            [Weight],
            [Position],
            [RubricId],
            [LastChangeDateTime]
        )
        VALUES
        (
            @Id,
            @Category,
            @Description,
            @CFItemId,
            @Weight,
            @Position,
            @RubricId,
            @LastChangeDateTime
        );
        SELECT * FROM [dbo].[CFRubricCriterion] WHERE [Id] = @Id;
    END
GO
PRINT N'Creating Procedure [dbo].[InsertCFRubricCriterionLevel]...';


GO
CREATE PROCEDURE [dbo].[InsertCFRubricCriterionLevel]
(
    @Id UNIQUEIDENTIFIER,
    @Description VARCHAR(200) = NULL,
    @Quality VARCHAR(200) = NULL,
    @Score FLOAT = NULL,
    @Feedback VARCHAR(200) = NULL,
    @Position INT = NULL,
    @LastChangeDateTime DATETIME,
    @RubricCriterionId UNIQUEIDENTIFIER = NULL
)
AS
    BEGIN
        SET NOCOUNT ON;
        INSERT INTO [dbo].[CFRubricCriterionLevel]
        (
            [Id],
            [Description],
            [Quality],
            [Score],
            [Feedback],
            [Position],
            [LastChangeDateTime],
            [RubricCriterionId]
        )
        VALUES
        (
            @Id,
            @Description,
            @Quality,
            @Score,
            @Feedback,
            @Position,
            @LastChangeDateTime,
            @RubricCriterionId
        );
        SELECT * FROM [dbo].[CFRubricCriterionLevel] WHERE [Id] = @Id;
    END
GO
PRINT N'Creating Procedure [dbo].[InsertCFSubject]...';


GO
CREATE PROCEDURE [dbo].[InsertCFSubject]
(
    @Id UNIQUEIDENTIFIER,
    @Title VARCHAR(200),
    @HierarchyCode VARCHAR(200),
    @Description VARCHAR(200) = NULL,
    @LastChangeDateTime DATETIME
)
AS
    BEGIN
        SET NOCOUNT ON;
        INSERT INTO [dbo].[CFSubject]
        (
            [Id],
            [Title],
            [HierarchyCode],
            [Description],
            [LastChangeDateTime]
        )
        VALUES
        (
            @Id,
            @Title,
            @HierarchyCode,
            @Description,
            @LastChangeDateTime
        );
        SELECT * FROM [dbo].[CFSubject] WHERE [Id] = @Id;
    END
GO
PRINT N'Creating Procedure [dbo].[UpdateCFAssociation]...';


GO
/********************************************************************************
        Update Procedures
********************************************************************************/

CREATE PROCEDURE [dbo].[UpdateCFAssociation]
(
    @Id UNIQUEIDENTIFIER,
    @AssociationType VARCHAR(200),
    @SequenceNumber INT = NULL,
    @OriginNodeId VARCHAR(200),
    @DestinationNodeId VARCHAR(200),
    @CFAssociationGroupingId UNIQUEIDENTIFIER = NULL,
    @LastChangeDateTime DATETIME,
    @CFDocumentId UNIQUEIDENTIFIER = NULL
)
AS
    BEGIN
        SET NOCOUNT ON;
        IF @SequenceNumber IS NULL
            BEGIN
                SET @SequenceNumber = (SELECT [SequenceNumber] FROM [dbo].[CFAssociation] WHERE @Id = [Id]);
            END
        IF @CFAssociationGroupingId IS NULL
            BEGIN
                SET @CFAssociationGroupingId = (SELECT [CFAssociationGroupingId] FROM [dbo].[CFAssociation] WHERE @Id = [Id]);
            END
        IF @CFDocumentId IS NULL
            BEGIN
                SET @CFDocumentId = (SELECT [CFDocumentId] FROM [dbo].[CFAssociation] WHERE @Id = [Id]);
            END
        UPDATE [dbo].[CFAssociation]
        SET [AssociationType] = @AssociationType,
        [SequenceNumber] = @SequenceNumber,
        [OriginNodeId] = @OriginNodeId,
        [DestinationNodeId] = @DestinationNodeId,
        [CFAssociationGroupingId] = @CFAssociationGroupingId,
        [LastChangeDateTime] = @LastChangeDateTime,
        [CFDocumentId] = @CFDocumentId
        WHERE [Id] = @Id;
        SELECT * FROM [dbo].[CFAssociation] WHERE [Id] = @Id;
    END
GO
PRINT N'Creating Procedure [dbo].[UpdateCFAssociationGrouping]...';


GO
CREATE PROCEDURE [dbo].[UpdateCFAssociationGrouping]
(
    @Id UNIQUEIDENTIFIER,
    @Title VARCHAR(200),
    @Description VARCHAR(200) = NULL,
    @LastChangeDateTime DATETIME
)
AS
    BEGIN
        SET NOCOUNT ON;
        IF @Description IS NULL
            BEGIN
                SET @Description = (SELECT [Description] FROM [dbo].[CFAssociationGrouping] WHERE @Id = [Id]);
            END
        UPDATE [dbo].[CFAssociationGrouping]
        SET [Title] = @Title,
        [Description] = @Description,
        [LastChangeDateTime] = @LastChangeDateTime
        WHERE [Id] = @Id;
        SELECT * FROM [dbo].[CFAssociationGrouping] WHERE [Id] = @Id;
    END
GO
PRINT N'Creating Procedure [dbo].[UpdateCFConcept]...';


GO
CREATE PROCEDURE [dbo].[UpdateCFConcept]
(
    @Id UNIQUEIDENTIFIER,
    @Title VARCHAR(200),
    @Keywords VARCHAR(200) = NULL,
    @HierarchyCode VARCHAR(200),
    @Description VARCHAR(200) = NULL,
    @LastChangeDateTime DATETIME
)
AS
    BEGIN
        SET NOCOUNT ON;
        IF @Keywords IS NULL
            BEGIN
                SET @Keywords = (SELECT [Keywords] FROM [dbo].[CFConcept] WHERE @Id = [Id]);
            END
        IF @Description IS NULL
            BEGIN
                SET @Description = (SELECT [Description] FROM [dbo].[CFConcept] WHERE @Id = [Id]);
            END
        UPDATE [dbo].[CFConcept]
        SET [Title] = @Title,
        [Keywords] = @Keywords,
        [HierarchyCode] = @HierarchyCode,
        [Description] = @Description,
        [LastChangeDateTime] = @LastChangeDateTime
        WHERE [Id] = @Id;
        SELECT * FROM [dbo].[CFConcept] WHERE [Id] = @Id;
    END
GO
PRINT N'Creating Procedure [dbo].[UpdateCFDocument]...';


GO
CREATE PROCEDURE [dbo].[UpdateCFDocument]
(
    @Id UNIQUEIDENTIFIER,
    @Creator VARCHAR(200),
    @Title VARCHAR(200),
    @LastChangeDateTime DATETIME,
    @OfficialSourceURL VARCHAR(200) = NULL,
    @Publisher VARCHAR(200) = NULL,
    @Description VARCHAR(200) = NULL,
    @Subject VARCHAR(200) = NULL,
    @SubjectId UNIQUEIDENTIFIER = NULL,
    @Language VARCHAR(200) = NULL,
    @Version VARCHAR(200) = NULL,
    @AdoptionStatus VARCHAR(200) = NULL,
    @StatusStartDate DATE = NULL,
    @StatusEndDate DATE = NULL,
    @LicenseId UNIQUEIDENTIFIER = NULL,
    @Notes VARCHAR(MAX) = NULL
)
AS
    BEGIN
        SET NOCOUNT ON;
        IF @OfficialSourceURL IS NULL
            BEGIN
                SET @OfficialSourceURL = (SELECT [OfficialSourceURL] FROM [dbo].[CFDocument] WHERE @Id = [Id]);
            END
        IF @Publisher IS NULL
            BEGIN
                SET @Publisher = (SELECT [Publisher] FROM [dbo].[CFDocument] WHERE @Id = [Id]);
            END
        IF @Description IS NULL
            BEGIN
                SET @Description = (SELECT [Description] FROM [dbo].[CFDocument] WHERE @Id = [Id]);
            END
        IF @Subject IS NULL
            BEGIN
                SET @Subject = (SELECT [Subject] FROM [dbo].[CFDocument] WHERE @Id = [Id]);
            END
        IF @SubjectId IS NULL
            BEGIN
                SET @SubjectId = (SELECT [SubjectId] FROM [dbo].[CFDocument] WHERE @Id = [Id]);
            END
        IF @Language IS NULL
            BEGIN
                SET @Language = (SELECT [Language] FROM [dbo].[CFDocument] WHERE @Id = [Id]);
            END
        IF @Version IS NULL
            BEGIN
                SET @Version = (SELECT [Version] FROM [dbo].[CFDocument] WHERE @Id = [Id]);
            END
        IF @AdoptionStatus IS NULL
            BEGIN
                SET @AdoptionStatus = (SELECT [AdoptionStatus] FROM [dbo].[CFDocument] WHERE @Id = [Id]);
            END
        IF @StatusStartDate IS NULL
            BEGIN
                SET @StatusStartDate = (SELECT [StatusStartDate] FROM [dbo].[CFDocument] WHERE @Id = [Id]);
            END
        IF @StatusEndDate IS NULL
            BEGIN
                SET @StatusEndDate = (SELECT [StatusEndDate] FROM [dbo].[CFDocument] WHERE @Id = [Id]);
            END
        IF @LicenseId IS NULL
            BEGIN
                SET @LicenseId = (SELECT [LicenseId] FROM [dbo].[CFDocument] WHERE @Id = [Id]);
            END
        IF @Notes IS NULL
            BEGIN
                SET @Notes = (SELECT [Notes] FROM [dbo].[CFDocument] WHERE @Id = [Id]);
            END
        UPDATE [dbo].[CFDocument]
        SET [Creator] = @Creator,
        [Title] = @Title,
        [LastChangeDateTime] = @LastChangeDateTime,
        [OfficialSourceURL] = @OfficialSourceURL,
        [Publisher] = @Publisher,
        [Description] = @Description,
        [Subject] = @Subject,
        [SubjectId] = @SubjectId,
        [Language] = @Language,
        [Version] = @Version,
        [AdoptionStatus] = @AdoptionStatus,
        [StatusStartDate] = @StatusStartDate,
        [StatusEndDate] = @StatusEndDate,
        [LicenseId] = @LicenseId,
        [Notes] = @Notes
        WHERE [Id] = @Id;
        SELECT * FROM [dbo].[CFDocument] WHERE [Id] = @Id;
    END
GO
PRINT N'Creating Procedure [dbo].[UpdateCFItem]...';


GO
CREATE PROCEDURE [dbo].[UpdateCFItem]
(
    @Id UNIQUEIDENTIFIER,
    @FullStatement VARCHAR(3000),
    @AlternativeLabel VARCHAR(3000) = NULL,
    @CFItemType VARCHAR(200) = NULL,
    @HumanCodingScheme VARCHAR(200) = NULL,
    @ListEnumeration INT = NULL,
    @AbbreviatedStatement VARCHAR(3000) = NULL,
    @ConceptKeywords VARCHAR(200) = NULL,
    @ConceptKeywordsId UNIQUEIDENTIFIER = NULL,
    @Notes VARCHAR(MAX) = NULL,
    @Language VARCHAR(200) = NULL,
    @EducationLevel VARCHAR(200) = NULL,
    @CFItemTypeId UNIQUEIDENTIFIER = NULL,
    @LicenseId UNIQUEIDENTIFIER = NULL,
    @StatusStartDate DATE = NULL,
    @StatusEndDate DATE = NULL,
    @LastChangeDateTime DATETIME,
    @CFDocumentId UNIQUEIDENTIFIER
)
AS
    BEGIN
        SET NOCOUNT ON;
        IF @AlternativeLabel IS NULL
            BEGIN
                SET @AlternativeLabel = (SELECT [AlternativeLabel] FROM [dbo].[CFItem] WHERE @Id = [Id]);
            END
        IF @CFItemType IS NULL
            BEGIN
                SET @CFItemType = (SELECT [CFItemType] FROM [dbo].[CFItem] WHERE @Id = [Id]);
            END
        IF @HumanCodingScheme IS NULL
            BEGIN
                SET @HumanCodingScheme = (SELECT [HumanCodingScheme] FROM [dbo].[CFItem] WHERE @Id = [Id]);
            END
        IF @ListEnumeration IS NULL
            BEGIN
                SET @ListEnumeration = (SELECT [ListEnumeration] FROM [dbo].[CFItem] WHERE @Id = [Id]);
            END
        IF @AbbreviatedStatement IS NULL
            BEGIN
                SET @AbbreviatedStatement = (SELECT [AbbreviatedStatement] FROM [dbo].[CFItem] WHERE @Id = [Id]);
            END
        IF @ConceptKeywords IS NULL
            BEGIN
                SET @ConceptKeywords = (SELECT [ConceptKeywords] FROM [dbo].[CFItem] WHERE @Id = [Id]);
            END
        IF @ConceptKeywordsId IS NULL
            BEGIN
                SET @ConceptKeywordsId = (SELECT [ConceptKeywordsId] FROM [dbo].[CFItem] WHERE @Id = [Id]);
            END
        IF @Notes IS NULL
            BEGIN
                SET @Notes = (SELECT [Notes] FROM [dbo].[CFItem] WHERE @Id = [Id]);
            END
        IF @Language IS NULL
            BEGIN
                SET @Language = (SELECT [Language] FROM [dbo].[CFItem] WHERE @Id = [Id]);
            END
        IF @EducationLevel IS NULL
            BEGIN
                SET @EducationLevel = (SELECT [EducationLevel] FROM [dbo].[CFItem] WHERE @Id = [Id]);
            END
        IF @CFItemTypeId IS NULL
            BEGIN
                SET @CFItemTypeId = (SELECT [CFItemTypeId] FROM [dbo].[CFItem] WHERE @Id = [Id]);
            END
        IF @LicenseId IS NULL
            BEGIN
                SET @LicenseId = (SELECT [LicenseId] FROM [dbo].[CFItem] WHERE @Id = [Id]);
            END
        IF @StatusStartDate IS NULL
            BEGIN
                SET @StatusStartDate = (SELECT [StatusStartDate] FROM [dbo].[CFItem] WHERE @Id = [Id]);
            END
        IF @StatusEndDate IS NULL
            BEGIN
                SET @StatusEndDate = (SELECT [StatusEndDate] FROM [dbo].[CFItem] WHERE @Id = [Id]);
            END
        UPDATE [dbo].[CFItem]
        SET [FullStatement] = @FullStatement,
        [AlternativeLabel] = @AlternativeLabel,
        [CFItemType] = @CFItemType,
        [HumanCodingScheme] = @HumanCodingScheme,
        [ListEnumeration] = @ListEnumeration,
        [AbbreviatedStatement] = @AbbreviatedStatement,
        [ConceptKeywords] = @ConceptKeywords,
        [ConceptKeywordsId] = @ConceptKeywordsId,
        [Notes] = @Notes,
        [Language] = @Language,
        [EducationLevel] = @EducationLevel,
        [CFItemTypeId] = @CFItemTypeId,
        [LicenseId] = @LicenseId,
        [StatusStartDate] = @StatusStartDate,
        [StatusEndDate] = @StatusEndDate,
        [LastChangeDateTime] = @LastChangeDateTime,
        [CFDocumentId] = @CFDocumentId
        WHERE [Id] = @Id;
        SELECT * FROM [dbo].[CFItem] WHERE [Id] = @Id;
    END
GO
PRINT N'Creating Procedure [dbo].[UpdateCFItemType]...';


GO
CREATE PROCEDURE [dbo].[UpdateCFItemType]
(
    @Id UNIQUEIDENTIFIER,
    @Title VARCHAR(200),
    @HierarchyCode VARCHAR(200),
    @Description VARCHAR(200),
    @TypeCode VARCHAR(200) = NULL,
    @LastChangeDateTime DATETIME
)
AS
    BEGIN
        SET NOCOUNT ON;
        IF @TypeCode IS NULL
            BEGIN
                SET @TypeCode = (SELECT [TypeCode] FROM [dbo].[CFItemType] WHERE @Id = [Id]);
            END
        UPDATE [dbo].[CFItemType]
        SET [Title] = @Title,
        [HierarchyCode] = @HierarchyCode,
        [Description] = @Description,
        [TypeCode] = @TypeCode,
        [LastChangeDateTime] = @LastChangeDateTime
        WHERE [Id] = @Id;
        SELECT * FROM [dbo].[CFItemType] WHERE [Id] = @Id;
    END
GO
PRINT N'Creating Procedure [dbo].[UpdateCFLicense]...';


GO
CREATE PROCEDURE [dbo].[UpdateCFLicense]
(
    @Id UNIQUEIDENTIFIER,
    @Title VARCHAR(200),
    @Description VARCHAR(200) = NULL,
    @LicenseText VARCHAR(MAX),
    @LastChangeDateTime DATETIME
)
AS
    BEGIN
        SET NOCOUNT ON;
        IF @Description IS NULL
            BEGIN
                SET @Description = (SELECT [Description] FROM [dbo].[CFLicense] WHERE @Id = [Id]);
            END
        UPDATE [dbo].[CFLicense]
        SET [Title] = @Title,
        [Description] = @Description,
        [LicenseText] = @LicenseText,
        [LastChangeDateTime] = @LastChangeDateTime
        WHERE [Id] = @Id;
        SELECT * FROM [dbo].[CFLicense] WHERE [Id] = @Id;
    END
GO
PRINT N'Creating Procedure [dbo].[UpdateCFRubric]...';


GO
CREATE PROCEDURE [dbo].[UpdateCFRubric]
(
    @Id UNIQUEIDENTIFIER,
    @Title VARCHAR(200) = NULL,
    @Description VARCHAR(200) = NULL,
    @LastChangeDateTime DATETIME
)
AS
    BEGIN
        SET NOCOUNT ON;
        IF @Title IS NULL
            BEGIN
                SET @Title = (SELECT [Title] FROM [dbo].[CFRubric] WHERE @Id = [Id]);
            END
        IF @Description IS NULL
            BEGIN
                SET @Description = (SELECT [Description] FROM [dbo].[CFRubric] WHERE @Id = [Id]);
            END
        UPDATE [dbo].[CFRubric]
        SET [Title] = @Title,
        [Description] = @Description,
        [LastChangeDateTime] = @LastChangeDateTime
        WHERE [Id] = @Id;
        SELECT * FROM [dbo].[CFRubric] WHERE [Id] = @Id;
    END
GO
PRINT N'Creating Procedure [dbo].[UpdateCFRubricCriterion]...';


GO
CREATE PROCEDURE [dbo].[UpdateCFRubricCriterion]
(
    @Id UNIQUEIDENTIFIER,
    @Category VARCHAR(200) = NULL,
    @Description VARCHAR(200) = NULL,
    @CFItemId UNIQUEIDENTIFIER = NULL,
    @Weight FLOAT = NULL,
    @Position INT = NULL,
    @RubricId UNIQUEIDENTIFIER = NULL,
    @LastChangeDateTime DATETIME
)
AS
    BEGIN
        SET NOCOUNT ON;
        IF @Category IS NULL
            BEGIN
                SET @Category = (SELECT [Category] FROM [dbo].[CFRubricCriterion] WHERE @Id = [Id]);
            END
        IF @Description IS NULL
            BEGIN
                SET @Description = (SELECT [Description] FROM [dbo].[CFRubricCriterion] WHERE @Id = [Id]);
            END
        IF @CFItemId IS NULL
            BEGIN
                SET @CFItemId = (SELECT [CFItemId] FROM [dbo].[CFRubricCriterion] WHERE @Id = [Id]);
            END
        IF @Weight IS NULL
            BEGIN
                SET @Weight = (SELECT [Weight] FROM [dbo].[CFRubricCriterion] WHERE @Id = [Id]);
            END
        IF @Position IS NULL
            BEGIN
                SET @Position = (SELECT [Position] FROM [dbo].[CFRubricCriterion] WHERE @Id = [Id]);
            END
        IF @RubricId IS NULL
            BEGIN
                SET @RubricId = (SELECT [RubricId] FROM [dbo].[CFRubricCriterion] WHERE @Id = [Id]);
            END
        UPDATE [dbo].[CFRubricCriterion]
        SET [Category] = @Category,
        [Description] = @Description,
        [CFItemId] = @CFItemId,
        [Weight] = @Weight,
        [Position] = @Position,
        [RubricId] = @RubricId,
        [LastChangeDateTime] = @LastChangeDateTime
        WHERE [Id] = @Id;
        SELECT * FROM [dbo].[CFRubricCriterion] WHERE [Id] = @Id;
    END
GO
PRINT N'Creating Procedure [dbo].[UpdateCFRubricCriterionLevel]...';


GO
CREATE PROCEDURE [dbo].[UpdateCFRubricCriterionLevel]
(
    @Id UNIQUEIDENTIFIER,
    @Description VARCHAR(200) = NULL,
    @Quality VARCHAR(200) = NULL,
    @Score FLOAT = NULL,
    @Feedback VARCHAR(200) = NULL,
    @Position INT = NULL,
    @LastChangeDateTime DATETIME,
    @RubricCriterionId UNIQUEIDENTIFIER = NULL
)
AS
    BEGIN
        SET NOCOUNT ON;
        IF @Description IS NULL
            BEGIN
                SET @Description = (SELECT [Description] FROM [dbo].[CFRubricCriterionLevel] WHERE @Id = [Id]);
            END
        IF @Quality IS NULL
            BEGIN
                SET @Quality = (SELECT [Quality] FROM [dbo].[CFRubricCriterionLevel] WHERE @Id = [Id]);
            END
        IF @Score IS NULL
            BEGIN
                SET @Score = (SELECT [Score] FROM [dbo].[CFRubricCriterionLevel] WHERE @Id = [Id]);
            END
        IF @Feedback IS NULL
            BEGIN
                SET @Feedback = (SELECT [Feedback] FROM [dbo].[CFRubricCriterionLevel] WHERE @Id = [Id]);
            END
        IF @Position IS NULL
            BEGIN
                SET @Position = (SELECT [Position] FROM [dbo].[CFRubricCriterionLevel] WHERE @Id = [Id]);
            END
        IF @RubricCriterionId IS NULL
            BEGIN
                SET @RubricCriterionId = (SELECT [RubricCriterionId] FROM [dbo].[CFRubricCriterionLevel] WHERE @Id = [Id]);
            END
        UPDATE [dbo].[CFRubricCriterionLevel]
        SET [Description] = @Description,
        [Quality] = @Quality,
        [Score] = @Score,
        [Feedback] = @Feedback,
        [Position] = @Position,
        [LastChangeDateTime] = @LastChangeDateTime,
        [RubricCriterionId] = @RubricCriterionId
        WHERE [Id] = @Id;
        SELECT * FROM [dbo].[CFRubricCriterionLevel] WHERE [Id] = @Id;
    END
GO
PRINT N'Creating Procedure [dbo].[UpdateCFSubject]...';


GO
CREATE PROCEDURE [dbo].[UpdateCFSubject]
(
    @Id UNIQUEIDENTIFIER,
    @Title VARCHAR(200),
    @HierarchyCode VARCHAR(200),
    @Description VARCHAR(200) = NULL,
    @LastChangeDateTime DATETIME
)
AS
    BEGIN
        SET NOCOUNT ON;
        IF @Description IS NULL
            BEGIN
                SET @Description = (SELECT [Description] FROM [dbo].[CFSubject] WHERE @Id = [Id]);
            END
        UPDATE [dbo].[CFSubject]
        SET [Title] = @Title,
        [HierarchyCode] = @HierarchyCode,
        [Description] = @Description,
        [LastChangeDateTime] = @LastChangeDateTime
        WHERE [Id] = @Id;
        SELECT * FROM [dbo].[CFSubject] WHERE [Id] = @Id;
    END
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'ec04a66e-1cc1-437c-8793-c2d50a7c0ed0')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('ec04a66e-1cc1-437c-8793-c2d50a7c0ed0')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '18359bcf-f537-4cde-9676-e2f9a6523088')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('18359bcf-f537-4cde-9676-e2f9a6523088')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
USE [master];
GO
ALTER AUTHORIZATION ON DATABASE::[$(DatabaseName)] TO [sa]
GO
ALTER DATABASE [$(DatabaseName)] SET TRUSTWORTHY ON 
GO
ALTER DATABASE [$(DatabaseName)] SET RECURSIVE_TRIGGERS ON
GO
ALTER DATABASE [$(DatabaseName)] SET AUTO_UPDATE_STATISTICS OFF 
GO
ALTER DATABASE [$(DatabaseName)] SET AUTO_UPDATE_STATISTICS_ASYNC OFF 
GO
USE [$(DatabaseName)]
GO
ALTER DATABASE [$(DatabaseName)] SET COMPATIBILITY_LEVEL = 130
GO
IF (1 = FULLTEXTSERVICEPROPERTY('IsFullTextInstalled'))
    BEGIN
        EXEC [$(DatabaseName)].[dbo].[sp_fulltext_database] @action = 'enable'
    END
GO

SET DATEFORMAT ymd;
GO

/*
INSERT [dbo].[CFLicense] ([Id], [Title], [Description], [Text], [LastChangeDateTime]) VALUES (N'9ea30160-c7c1-445a-9344-d9d780ede411', N'MIT License', N'MIT License', N'Copyright <YEAR> <COPYRIGHT HOLDER>    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.', CAST(N'2021-10-23T06:48:00.000' AS DateTime))
GO

INSERT [dbo].[CFItemType] ([Id], [Title], [Description], [HierarchyCode], [TypeCode], [LastChangeDateTime]) VALUES (N'38b8475b-f40e-57f9-b101-00cbe260cbf4', N'Grade/Course', N'Grade/Course', N'Grade/Course', N'Grade/Course', CAST(N'2018-03-26T11:53:03.000' AS DateTime))
INSERT [dbo].[CFItemType] ([Id], [Title], [Description], [HierarchyCode], [TypeCode], [LastChangeDateTime]) VALUES (N'd39b2c1e-907e-528a-b411-2cfdeb8c3c30', N'Introduction', N'Introduction', N'Introduction', N'Introduction', CAST(N'2017-09-27T02:53:54.000' AS DateTime))
INSERT [dbo].[CFItemType] ([Id], [Title], [Description], [HierarchyCode], [TypeCode], [LastChangeDateTime]) VALUES (N'43714e16-27f2-5a97-849d-40bd238dee56', N'Student Expectation', N'Student Expectation', N'Student Expectation', N'Student Expectation', CAST(N'2017-09-27T02:53:54.000' AS DateTime))
INSERT [dbo].[CFItemType] ([Id], [Title], [Description], [HierarchyCode], [TypeCode], [LastChangeDateTime]) VALUES (N'1ef3b052-baae-545d-92ca-703596be5e89', N'Domain', N'Domain', N'Domain', N'Domain', CAST(N'2017-12-14T06:25:11.000' AS DateTime))
INSERT [dbo].[CFItemType] ([Id], [Title], [Description], [HierarchyCode], [TypeCode], [LastChangeDateTime]) VALUES (N'9d0f55b2-42e4-54c3-abb8-7f1f811ca95a', N'', N'', N'', N'', CAST(N'2017-10-13T09:46:25.000' AS DateTime))
INSERT [dbo].[CFItemType] ([Id], [Title], [Description], [HierarchyCode], [TypeCode], [LastChangeDateTime]) VALUES (N'2544508c-27d8-517d-8600-aa022c54167a', N'Examples of Child Behaviors', N'Examples of Child Behaviors', N'Examples of Child Behaviors', N'Examples of Child Behaviors', CAST(N'2018-04-02T03:41:27.000' AS DateTime))
INSERT [dbo].[CFItemType] ([Id], [Title], [Description], [HierarchyCode], [TypeCode], [LastChangeDateTime]) VALUES (N'3b3bce77-0dbf-59e4-9d40-b06d31809299', N'Knowledge and Skills', N'Knowledge and Skills', N'Knowledge and Skills', N'Knowledge and Skills', CAST(N'2017-09-27T02:53:54.000' AS DateTime))
INSERT [dbo].[CFItemType] ([Id], [Title], [Description], [HierarchyCode], [TypeCode], [LastChangeDateTime]) VALUES (N'f4ea1eb1-198b-599b-956a-b9ea37f0a29c', N'Strand', N'Strand', N'Strand', N'Strand', CAST(N'2017-09-27T02:53:54.000' AS DateTime))
INSERT [dbo].[CFItemType] ([Id], [Title], [Description], [HierarchyCode], [TypeCode], [LastChangeDateTime]) VALUES (N'b15452ab-27f6-5b2f-a87d-cec9d2977903', N'General Requirements', N'General Requirements', N'General Requirements', N'General Requirements', CAST(N'2018-03-26T11:53:03.000' AS DateTime))
INSERT [dbo].[CFItemType] ([Id], [Title], [Description], [HierarchyCode], [TypeCode], [LastChangeDateTime]) VALUES (N'099248a3-14ed-5540-8171-d164b38be51c', N'Subchapter', N'Subchapter', N'Subchapter', N'Subchapter', CAST(N'2017-09-27T02:53:54.000' AS DateTime))
INSERT [dbo].[CFItemType] ([Id], [Title], [Description], [HierarchyCode], [TypeCode], [LastChangeDateTime]) VALUES (N'48b7c6ff-18e0-5937-9c7e-e0c0ffe6a576', N'Skills', N'Skills', N'Skills', N'Skills', CAST(N'2018-04-02T03:41:27.000' AS DateTime))
INSERT [dbo].[CFItemType] ([Id], [Title], [Description], [HierarchyCode], [TypeCode], [LastChangeDateTime]) VALUES (N'a76cabdb-dfba-5956-aceb-e9cb878e8af3', N'End of Prekindergarten Year Outcomes', N'End of Prekindergarten Year Outcomes', N'End of Prekindergarten Year Outcomes', N'End of Prekindergarten Year Outcomes', CAST(N'2018-04-02T03:41:27.000' AS DateTime))
INSERT [dbo].[CFItemType] ([Id], [Title], [Description], [HierarchyCode], [TypeCode], [LastChangeDateTime]) VALUES (N'703dbfc5-3a0a-5d2a-ab74-e9ceb4b66f8b', N'Implementation', N'Implementation', N'Implementation', N'Implementation', CAST(N'2018-03-26T11:53:03.000' AS DateTime))
GO

INSERT [dbo].[CFSubject] ([Id], [Title], [HierarchyCode], [Description], [LastChangeDateTime]) VALUES (N'2e740aec-481d-589f-8e2c-04a1830d0910', N'Fine Arts', N'Fine Arts', N'Fine Arts', CAST(N'2017-09-27T03:23:58.000' AS DateTime))
INSERT [dbo].[CFSubject] ([Id], [Title], [HierarchyCode], [Description], [LastChangeDateTime]) VALUES (N'bfe9fd53-58f0-5cdb-8dff-086281a7fd4c', N'Science', N'Science', N'Science', CAST(N'2017-09-27T03:22:42.000' AS DateTime))
INSERT [dbo].[CFSubject] ([Id], [Title], [HierarchyCode], [Description], [LastChangeDateTime]) VALUES (N'82723d53-f434-5922-982f-0d5b5f674e3a', N'Career Development', N'Career Development', N'Career Development', CAST(N'2017-09-27T03:25:12.000' AS DateTime))
INSERT [dbo].[CFSubject] ([Id], [Title], [HierarchyCode], [Description], [LastChangeDateTime]) VALUES (N'c2fcebee-e9af-590c-92de-101617269943', N'Economics with Emphasis on the Free Enterprise System and Its Benefits', N'Economics with Emphasis on the Free Enterprise System and Its Benefits', N'Economics with Emphasis on the Free Enterprise System and Its Benefits', CAST(N'2017-09-27T03:24:24.000' AS DateTime))
INSERT [dbo].[CFSubject] ([Id], [Title], [HierarchyCode], [Description], [LastChangeDateTime]) VALUES (N'34b471c7-c888-5d31-b814-3e46442035c5', N'Technology Applications', N'Technology Applications', N'Technology Applications', CAST(N'2017-09-27T03:24:43.000' AS DateTime))
INSERT [dbo].[CFSubject] ([Id], [Title], [HierarchyCode], [Description], [LastChangeDateTime]) VALUES (N'c1bdae11-ffad-510a-a5d6-5760286537dc', N'Elective Courses on the Bible', N'Elective Courses on the Bible', N'Elective Courses on the Bible', CAST(N'2019-08-22T07:08:32.000' AS DateTime))
INSERT [dbo].[CFSubject] ([Id], [Title], [HierarchyCode], [Description], [LastChangeDateTime]) VALUES (N'6662af52-08ab-5453-b063-6c17e2bed2a7', N'Mathematics', N'', N'Mathematics', CAST(N'2017-12-14T06:10:04.000' AS DateTime))
INSERT [dbo].[CFSubject] ([Id], [Title], [HierarchyCode], [Description], [LastChangeDateTime]) VALUES (N'7c7afb05-e175-5dda-be1c-6fd74f036d2e', N'Health Education', N'Health Education', N'Health Education', CAST(N'2017-09-27T03:23:25.000' AS DateTime))
INSERT [dbo].[CFSubject] ([Id], [Title], [HierarchyCode], [Description], [LastChangeDateTime]) VALUES (N'83556529-a4f5-5092-a85e-76afd819dab9', N'Languages Other Than English', N'Languages Other Than English', N'Languages Other Than English', CAST(N'2017-09-27T03:23:12.000' AS DateTime))
INSERT [dbo].[CFSubject] ([Id], [Title], [HierarchyCode], [Description], [LastChangeDateTime]) VALUES (N'2918d5eb-d81e-5513-b872-a317bb85603e', N'Spanish Language Arts and English as a Second Language', N'Spanish Language Arts and English as a Second Language', N'Spanish Language Arts and English as a Second Language', CAST(N'2017-09-27T03:25:35.000' AS DateTime))
INSERT [dbo].[CFSubject] ([Id], [Title], [HierarchyCode], [Description], [LastChangeDateTime]) VALUES (N'91c5269a-26f6-5d21-adaf-e0b820023516', N'Prekindergarten', N'Prekindergarten', N'Prekindergarten', CAST(N'2018-01-29T03:31:46.000' AS DateTime))
INSERT [dbo].[CFSubject] ([Id], [Title], [HierarchyCode], [Description], [LastChangeDateTime]) VALUES (N'79982571-d513-5eef-be18-ed850bd97b56', N'Social Studies', N'Social Studies', N'Social Studies', CAST(N'2017-09-27T03:22:53.000' AS DateTime))
INSERT [dbo].[CFSubject] ([Id], [Title], [HierarchyCode], [Description], [LastChangeDateTime]) VALUES (N'4bd04905-366f-5fbd-9426-f15dd18ccaa8', N'Mathematics', N'Mathematics', N'Mathematics', CAST(N'2017-09-27T03:22:31.000' AS DateTime))
INSERT [dbo].[CFSubject] ([Id], [Title], [HierarchyCode], [Description], [LastChangeDateTime]) VALUES (N'45a7d92c-6514-52fe-b548-f868ac0ecc0c', N'Chapter 113 Social Studies', N'Chapter 113 Social Studies', N'Chapter 113 Social Studies', CAST(N'2020-03-18T10:43:56.000' AS DateTime))
INSERT [dbo].[CFSubject] ([Id], [Title], [HierarchyCode], [Description], [LastChangeDateTime]) VALUES (N'6b7c0375-e3e5-5626-9969-fa05c09e3993', N'English Language Arts and Reading', N'English Language Arts and Reading', N'English Language Arts and Reading', CAST(N'2017-09-27T03:22:14.000' AS DateTime))
INSERT [dbo].[CFSubject] ([Id], [Title], [HierarchyCode], [Description], [LastChangeDateTime]) VALUES (N'9d67cf61-1b78-5ab2-b9f1-fde0be26aa95', N'Physical Education', N'Physical Education', N'Physical Education', CAST(N'2017-09-27T03:23:41.000' AS DateTime))
GO

EXEC [InsertCFDocument] N'11a9d541-3f03-552d-a03c-064e92f7325c', N'c2fcebee-e9af-590c-92de-101617269943', NULL, N'Texas Education Agency', N'http://ritter.tea.state.tx.us/rules/tac/chapter118', N'Chapter 118. Economics with Emphasis on the Free Enterprise System and Its Benefits', N'Texas Education Agency', N'Chapter 118. Economics with Emphasis on the Free Enterprise System and Its Benefits', N'1.1.2', N'deprecated', N'en', CAST(N'2010-08-22' AS Date), CAST(N'2019-08-19' AS Date), CAST(N'2019-08-20T06:05:25.000' AS DateTime), N'Version notes: Updated to v1.1.2 on 8/27/18 to include adopted/effective date details in "Notes" section for all Grade/Course items.')
GO
*/
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
